// __tests__/RootLayout.test.js
import React from "react";
import { render, screen } from "@testing-library/react";
import RootLayout, { metadata } from "../app/layout"; // adjust path if needed

// Mock next/font/google to avoid errors
jest.mock("next/font/google", () => ({
  Geist: jest.fn(() => ({ variable: "geist-sans-class" })),
  Geist_Mono: jest.fn(() => ({ variable: "geist-mono-class" })),
}));

describe("RootLayout component", () => {
  beforeEach(() => {
    // Ensure a clean body; do not wipe documentElement to avoid rendering <html> inside a div
    document.body.innerHTML = "";
  });

  test("renders children inside body", () => {
    // Render RootLayout and verify children are present in the document
    render(
      <RootLayout>
        <div data-testid="child">Hello World</div>
      </RootLayout>
    );

    const child = screen.getByTestId("child");
    expect(child).toBeInTheDocument();
    expect(child).toHaveTextContent("Hello World");
  });

  test("applies font classes to body", () => {
    render(
      <RootLayout>
        <div>Test</div>
      </RootLayout>
    );

    const body = document.querySelector("body");
    // The app router may attach font classes on the body element
    expect(body.className).toEqual(expect.stringContaining("antialiased"));
  });

  test("renders html element with lang attribute", () => {
    render(
      <RootLayout>
        <div>Test</div>
      </RootLayout>
    );

    const html = document.querySelector("html");
    expect(html.getAttribute("lang")).toBe("en");
  });

  // ---- Metadata coverage ----
  test("metadata object has expected properties", () => {
    expect(metadata).toHaveProperty("title", "Globe Talk");
    expect(metadata).toHaveProperty("description", "Generated by create next app");
    expect(metadata.icons).toHaveProperty("icon", "/images/LogoVPP-1.png");
  });
});
